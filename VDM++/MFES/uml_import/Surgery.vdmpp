class Surgery is subclass of Task
instance variables
  private secondaryDoctors:set of (HealthProfessional);
  private other:set of (HealthProfessional);
  
  inv card secondaryDoctors >= 0;
  inv card other >= 0;
  
operations
	public Surgery: HealthProfessional * Schedule * Patient * Hospital ==> Surgery
		Surgery(s, sch, p, h) == (medicalAssoc := s ; other := {}; secondaryDoctors := {}; Task(sch, p, h, <Surgery>))
	post medicalAssoc = s and other = {} and secondaryDoctors = {};
	
	pure public addSecondaryDoctor : HealthProfessional ==> set of (HealthProfessional)
		addSecondaryDoctor(s) == (return secondaryDoctors union {s})
	pre s <> medicalAssoc and s.getType() = <Surgeon> and  s not in set secondaryDoctors
	post s in set secondaryDoctors;
		
	pure public removeSecondaryDoctor : HealthProfessional ==> set of (HealthProfessional)
		removeSecondaryDoctor(s) == (return secondaryDoctors \ {s})
	pre s.getType() = <Surgeon> and s in set secondaryDoctors
	post s not in set secondaryDoctors;
		
	pure public addOther : HealthProfessional ==> set of (HealthProfessional)
		addOther(s) == (return other union {s})
	pre s.getType() = <Nurse> and s not in set other
	post s in set other;
		
	pure public removeOther : HealthProfessional ==> set of (HealthProfessional)
		removeOther(s) == (return other \ {s})
	pre s.getType() = <Nurse> and s in set other
	post s not in set other;
		
	public setMainDoctor : HealthProfessional ==> ()
		setMainDoctor(s) == (medicalAssoc := s)
	pre s.getType() = <Surgeon> and s not in set secondaryDoctors;
	
	public getMainDoctor : () ==> HealthProfessional
		getMainDoctor() == (return medicalAssoc);

	public getSurgeryPersons : Types`Type ==> set of (HealthProfessional)
		getSurgeryPersons(t) == (
															dcl med : set of (HealthProfessional);
															if(t = <Surgeon>)
																then med := secondaryDoctors
															else
																med := other;
															return med);
end Surgery
