class Hospital
types
	public String = seq of(char);
instance variables
  public medicalAssociated: set of (MedicalAssociated);
  public name: String;
  public address: String;
  public tasks: set of(Task);
  public safetyNet: [SafetyNetHospital];
 
 inv name <> [] and address <> [];
 inv safetyNet <> nil; 
 inv card medicalAssociated >= 0;
 inv card tasks >= 0;
operations

	public Hospital: String * String * SafetyNetHospital ==> Hospital
		Hospital(n, a, s) == (name := n; address := a; safetyNet := s; medicalAssociated := {}; tasks := {}; return self)
	pre n <> [] and a <> [] and safetyNet <> nil
	post name = n and address = a and safetyNet = s and medicalAssociated = {} and tasks = {};
	
	pure public getName: () ==> String
		getName() == (return name);
	
	pure public getAddress: () ==> String
		getAddress() == (return address);
		
	pure public getSafetyNet: () ==> SafetyNetHospital
		getSafetyNet() == (return safetyNet);
	
	pure public addMedAssociated: MedicalAssociated ==> set of (MedicalAssociated)
		addMedAssociated(d) == (return ({d} union medicalAssociated))
	pre d not in set medicalAssociated
	post d in set medicalAssociated;
		
	pure public removeMedAssociated: MedicalAssociated ==> set of (MedicalAssociated)
		removeMedAssociated(d) == (return (medicalAssociated \ {d}))
	pre d in set medicalAssociated
	post d not in set medicalAssociated;
	
	public addTask: Task ==> set of (Task)
		addTask(d) == (return ({d} union tasks))
	pre d not in set tasks and forall t in set tasks & 
		not (overlap(d, t) and not (d.getMedAssoc().getCC() <> t.getMedAssoc().getCC() and 
				d.getPatient().getCC() <> t.getPatient().getCC() and d.getMedAssoc().getCC() <> t.getPatient().getCC()
				and d.getPatient().getCC() <> t.getMedAssoc().getCC()))
	post d in set tasks;
		
	pure public removeTask: Task ==> set of (Task)
		removeTask(d) == (return (tasks \ {d}))
	pre d in set tasks
	post d not in set tasks;
	
	pure public getTasksByType: () ==> seq of(set of (Task))
		getTasksByType() == (
														dcl tasksTotal: seq of(set of (Task)), tasks2: set of (Task), tasks3: set of(Task), tasks4: set of (Task), tasks5: set of(Task);
														for all t in set tasks do(
															if(t.getType() = "Appointment")
																then tasks2 := tasks2 union {t}
															else if(t.getType() = "Urgencies")
																then tasks3 := tasks3 union {t}
															else if(t.getType() = "Surgery")
																then tasks4 := tasks4 union {t}
															else
																tasks5 := tasks5 union {t}
															);
																
														tasksTotal := tasksTotal ^ [tasks2] ^ [tasks3] ^ [tasks4] ^ [tasks5];
														return tasksTotal);

	pure public getMedicalAssociatedByType: () ==> seq of(set of (MedicalAssociated))
		getMedicalAssociatedByType() == (
											dcl med: seq of(set of(MedicalAssociated)), doctors: set of (MedicalAssociated), surgeons: set of (MedicalAssociated), other: set of (MedicalAssociated);
											for all d in set medicalAssociated do(
												if(d.getType() = <Doctor>)
													then doctors := doctors union {d}
												else if(d.getType() = <Surgeon>)
													then surgeons := surgeons union {d}
												else
													other := other union {d}
												);
												
												med := med ^ [doctors] ^ [surgeons] ^ [other];
											return med);
											
	pure public overlap: Task * Task ==> bool
		overlap(t1, t2) == (
													if(t1.getSchedule().compareDate(t1.getSchedule().getScheduleStart(), t2.getSchedule().getScheduleStart()) 
														or (t1.getSchedule().compareDateLess(t1.getSchedule().getScheduleStart(), t2.getSchedule().getScheduleStart()) 
														and not t1.getSchedule().compareDateLess(t1.getSchedule().getScheduleEnd(), t2.getSchedule().getScheduleStart()))
														or (not t1.getSchedule().compareDateLess(t1.getSchedule().getScheduleStart(), t2.getSchedule().getScheduleStart()) 
														and t1.getSchedule().compareDateLess(t1.getSchedule().getScheduleStart(), t2.getSchedule().getScheduleEnd())))
														then return true
													else
														return false);
														
end Hospital
