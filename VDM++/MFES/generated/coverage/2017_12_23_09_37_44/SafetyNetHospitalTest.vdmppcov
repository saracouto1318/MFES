class SafetyNetHospitalTest
types
instance variables
	private safetyNet: SafetyNetHospital := new SafetyNetHospital();
	
	private time1: Types`Time := mk_Types`Time(12, 10);
	private date1: Types`Date := mk_Types`Date(2017, 12, 25, time1);
	private time2: Types`Time := mk_Types`Time(12, 30);
	private date2: Types`Date := mk_Types`Date(2017, 12, 25, time2);
	private schedule: Schedule := new Schedule(date1, date2);
	
	private patient: Patient := new Patient("Rua 1 Maio", "Rui", "Andrade", "123456789", "223456111", "0987654321");
  private hospital: Hospital := new Hospital("Hospital das Camélias", "Rua de Cima", safetyNet);
  private doctor: HealthProfessional := new HealthProfessional("Rua de Cima", "Ana", "Marques", "123432156", "921349076", "111111222", <Doctor>);
  private doctor2: HealthProfessional := new HealthProfessional("Rua de Cima", "Anabela", "Marques", "123432157", "921349077", "111111223", <Doctor>);
  private surgeon: HealthProfessional := new HealthProfessional("Rua 2", "Diogo", "Viana", "234512389", "921349134", "111111232", <Surgeon>);
  private secSurgeon: HealthProfessional := new HealthProfessional("Rua 2", "Diana", "Viana", "234512390", "921349135", "111111235", <Surgeon>);
	private nurse: HealthProfessional := new HealthProfessional("Rua de Baixo", "Lisete", "Antunes", "123444654", "921378643", "111222333", <Nurse>);
	private technician: HealthProfessional := new HealthProfessional("Rua de Baixo", "Luís", "Antunes", "123444655", "921377654", "111222345", <Technician>);

	private appointment: Appointment := new Appointment(doctor, schedule, patient, hospital);
	private urgencies: Appointment := new Appointment(doctor2, <High>, schedule, patient, hospital);
	private surgery: Surgery := new Surgery(surgeon, schedule, patient, hospital);
	private treatment: Treatment := new Treatment(technician, "Fisioterapia", schedule, patient, hospital);
	
	private purpose: Types`Purpose := <Training>;
	private training : Training := new Training(purpose, schedule, doctor);
operations
	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	
	public testAddRemoveHospitals: () ==> ()
		testAddRemoveHospitals() == (
						dcl h1: Hospital, h2: Hospital, h3: Hospital;
						h1 := new Hospital("Hospital dos Lusíadas", "Rua de Cima", safetyNet);
						h2 := new Hospital("Hospital Novo", "Rua 1 de Maio", safetyNet);
						h3 := new Hospital("Hospital da Trofa", "Rua da Trofa", safetyNet);
						
						assertTrue(h1.getName() = "Hospital dos Lusíadas");
						assertTrue(h2.getName() = "Hospital Novo");
						assertTrue(h3.getName() = "Hospital da Trofa");
						
						assertTrue(h1.getAddress() = "Rua de Cima");
						assertTrue(h2.getAddress() = "Rua 1 de Maio");
						assertTrue(h3.getAddress() = "Rua da Trofa");
						
						assertTrue(card safetyNet.getHospitals() = 4);
						safetyNet.removeHospital(h1);
						assertTrue(card safetyNet.getHospitals() = 3);
						safetyNet.removeHospital(h2);
						assertTrue(card safetyNet.getHospitals() = 2);
		);
						
	public testAddRemoveTaskHospital : () ==> ()
		testAddRemoveTaskHospital() == (
						assertTrue(card hospital.getTasksByType(<Appointment>) = 1);
						assertTrue(card hospital.getTasksByType(<Urgencies>) = 1);
						assertTrue(card hospital.getTasksByType(<Surgery>) = 1);
						assertTrue(card hospital.getTasksByType(<Other>) = 1);
						
						hospital.removeTask(appointment);
						assertTrue(card hospital.getTasksByType(<Appointment>) = 0);
						
						hospital.addTask(appointment);
						assertTrue(card hospital.getTasksByType(<Appointment>) = 1);			
		);
		
		public testAddRemoveMedHospital : () ==> ()
		testAddRemoveMedHospital() == (
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Surgeon>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Nurse>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Technician>) = 0);
						
						hospital.addMedAssociated(doctor);
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 1);
						
						hospital.removeMedAssociated(doctor);
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 0);	
						
						hospital.addMedAssociated(doctor);
						hospital.addMedAssociated(surgeon);
						hospital.addMedAssociated(nurse);
						hospital.addMedAssociated(technician);		
		);
		
		public testAddRemoveTrainingHospital : () ==> ()
			testAddRemoveTrainingHospital() == (
				assertTrue(card hospital.getTrainingsByType(<Training>) = 0);
				assertTrue(card hospital.getTrainingsByType(<AddSkills>) = 0);
				
				hospital.addTraining(training);
				assertTrue(card hospital.getTrainingsByType(<Training>) = 1);
				
				hospital.removeTraining(training);
				assertTrue(card hospital.getTrainingsByType(<Training>) = 0);
		);
		
		public testGetHospitalsMoreAppointments : () ==> ()
			testGetHospitalsMoreAppointments() == (	
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Appointment>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Urgencies>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Surgery>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Other>).getName() = "Hospital das Camélias");
			);
			
		public testGetMedMoreHospitals : () ==> ()
			testGetMedMoreHospitals() == (
				for all t in set safetyNet.getHospitals() do
					if(t.getName() <> "Hospital das Camélias")
						then t.addMedAssociated(doctor);
						
				assertTrue(card safetyNet.getMedMoreHospitals(<Doctor>) = 1);
				assertTrue(safetyNet.getMedMoreHospitals(<Doctor>) = {doctor}); 	
			);
		
		public testGetMedAssociatedByPatient : () ==> ()
			testGetMedAssociatedByPatient() == (
				dcl mapTest : map Hospital to set of (HealthProfessional);
				
				doctor.addPatient(patient);
				mapTest := safetyNet.getMedAssociatedByPatient(patient, <Doctor>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {doctor});
			);
			
		public testGetMedByHospital : () ==> ()
			testGetMedByHospital() == (
				dcl mapTest : map Hospital to set of (HealthProfessional);
				mapTest := safetyNet.getMedByHospital(<Doctor>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {doctor});
				
				mapTest := safetyNet.getMedByHospital(<Surgeon>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {surgeon});
			);
			
		public testGetTasksByHospital : () ==> ()
			testGetTasksByHospital() == (
				dcl mapTest : map Hospital to set of (Task);
				mapTest := safetyNet.getTasksByHospital(<Appointment>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {appointment});
			);
			
		public testGetTrainingsByHospital : () ==> ()
			testGetTrainingsByHospital() == (
				dcl mapTest : map Hospital to set of (Training);
				mapTest := safetyNet.getTrainingsByHospital(<Training>);
				
				assertTrue(card mapTest(hospital) = 0);
				assertTrue(mapTest(hospital) = {});
				
				hospital.addTraining(training);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {training});
			);
			
		public testGetTasksPatient : () ==> ()
			testGetTasksPatient() == (
				dcl mapTest : map Hospital to set of (Task);
				mapTest := safetyNet.getTasksPatient(patient, <Appointment>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {appointment});
			);
			
		public static main: () ==> ()
 		main() == (
 			dcl safetyTest: SafetyNetHospitalTest := new SafetyNetHospitalTest();
 			safetyTest.testAddRemoveHospitals();
 			safetyTest.testAddRemoveTaskHospital();
 			safetyTest.testAddRemoveMedHospital();
 		);
						
end SafetyNetHospitalTest