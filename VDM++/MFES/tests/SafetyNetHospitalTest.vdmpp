class SafetyNetHospitalTest
instance variables
	private safetyNet: SafetyNetHospital := new SafetyNetHospital();
	
	private time1: Types`Time := mk_Types`Time(12, 10);
	private date1: Types`Date := mk_Types`Date(2017, 12, 25, time1);
	private time2: Types`Time := mk_Types`Time(12, 30);
	private date2: Types`Date := mk_Types`Date(2017, 12, 25, time2);
	private schedule: Schedule := new Schedule(date1, date2);
	
	private time3: Types`Time := mk_Types`Time(12, 15);
	private date3: Types`Date := mk_Types`Date(2017, 12, 25, time3);
	private time4: Types`Time := mk_Types`Time(12, 35);
	private date4: Types`Date := mk_Types`Date(2017, 12, 25, time4);
	private schedule2: Schedule := new Schedule(date3, date4);
	
	private time5: Types`Time := mk_Types`Time(12, 40);
	private date5: Types`Date := mk_Types`Date(2017, 12, 25, time5);
	private time6: Types`Time := mk_Types`Time(12, 50);
	private date6: Types`Date := mk_Types`Date(2017, 12, 25, time6);
	private schedule3: Schedule := new Schedule(date5, date6);
	
	private time7: Types`Time := mk_Types`Time(12, 10);
	private date7: Types`Date := mk_Types`Date(2017, 11, 22, time7);
	private time8: Types`Time := mk_Types`Time(12, 30);
	private date8: Types`Date := mk_Types`Date(2017, 11, 22, time8);
	private schedule4: Schedule := new Schedule(date7, date8);
	
	private time9: Types`Time := mk_Types`Time(12, 35);
	private date9: Types`Date := mk_Types`Date(2017, 11, 23, time9);
	private time10: Types`Time := mk_Types`Time(12, 45);
	private date10: Types`Date := mk_Types`Date(2017, 11, 23, time10);
	private schedule5: Schedule := new Schedule(date9, date10);
	
	private patient: Patient := new Patient("Rua 1 Maio", "Rui", "Andrade", "123456789", "223456111", "0987654321");
	private patient2: Patient := new Patient("Rua 1 Maio", "Diogo", "Andrade", "123321123", "911112345", "908765123");
	private patient3: Patient := new Patient("Rua 1 Maio", "Vitor", "Andrade", "135790864", "912345334", "123432130");
	private patient4: Patient := new Patient("Rua 1 Maio", "Simone", "Andrade", "234123765", "931238654", "0987654143");
	
  private hospital: Hospital := new Hospital("Hospital das Camélias", "Rua de Cima", safetyNet);
  
  private doctor: HealthProfessional := new HealthProfessional("Rua de Cima", "Ana", "Marques", "123432156", "921349076", "111111222", <Doctor>);
  private doctor2: HealthProfessional := new HealthProfessional("Rua de Cima", "Anabela", "Marques", "123432157", "921349077", "111111223", <Doctor>);
  private surgeon: HealthProfessional := new HealthProfessional("Rua 2", "Diogo", "Viana", "234512389", "921349134", "111111232", <Surgeon>);
  private secSurgeon: HealthProfessional := new HealthProfessional("Rua 2", "Diana", "Viana", "234512390", "921349135", "111111235", <Surgeon>);
	private nurse: HealthProfessional := new HealthProfessional("Rua de Baixo", "Lisete", "Antunes", "123444654", "921378643", "111222333", <Nurse>);
	private technician: HealthProfessional := new HealthProfessional("Rua de Baixo", "Luís", "Antunes", "123444655", "921377654", "111222345", <Technician>);

	private appointment: Appointment := new Appointment(doctor, schedule, patient, hospital);
	private appointment2: Appointment := new Appointment(doctor, schedule3, patient4, hospital);
	private appointment3: Appointment := new Appointment(doctor2, schedule3, patient, hospital);
	private urgencies: Appointment := new Appointment(doctor2, <High>, schedule, patient2, hospital);
	private surgery: Surgery := new Surgery(surgeon, schedule, patient3, hospital);
	private treatment: Treatment := new Treatment(technician, "Fisioterapia", schedule, patient4, hospital);
	
	private purpose: Types`Purpose := <Training>;
	private training : Training := new Training(purpose, schedule3, nurse);
	private training2 : Training := new Training(purpose, schedule2, doctor2);
operations
	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	
	public testAddRemoveHospitals: () ==> ()
		testAddRemoveHospitals() == (
						dcl h1: Hospital, h2: Hospital, h3: Hospital;
						h1 := new Hospital("Hospital dos Lusíadas", "Rua de Cima", safetyNet);
						h2 := new Hospital("Hospital Novo", "Rua 1 de Maio", safetyNet);
						h3 := new Hospital("Hospital da Trofa", "Rua da Trofa", safetyNet);
						IO`print("\n Number of hospitals: ");
						IO`print(card safetyNet.getHospitals());
			
						IO`print("\n\n Getting hospitals information \n");
						assertTrue(h1.getName() = "Hospital dos Lusíadas");
						assertTrue(h2.getName() = "Hospital Novo");
						assertTrue(h3.getName() = "Hospital da Trofa");
						
						assertTrue(h1.getAddress() = "Rua de Cima");
						assertTrue(h2.getAddress() = "Rua 1 de Maio");
						assertTrue(h3.getAddress() = "Rua da Trofa");
						
						IO`print("\n Removing hospitals \n");
						assertTrue(card safetyNet.getHospitals() = 4);
						safetyNet.removeHospital(h1);
						
						IO`print("\n Removing hospitals \n");
						assertTrue(card safetyNet.getHospitals() = 3);
						safetyNet.removeHospital(h2);
						assertTrue(card safetyNet.getHospitals() = 2);
						
						IO`print("\n Number of hospitals: ");
						IO`print(card safetyNet.getHospitals());
		);
						
		public testAddRemoveTaskHospital : () ==> ()
				testAddRemoveTaskHospital() == (
						IO`print("\n\n Total number of appointments: ");
						IO`print(card hospital.getTasksByType(<Appointment>));
						IO`print("\n Total number of urgencies: ");
						IO`print(card hospital.getTasksByType(<Urgencies>));
						IO`print("\n Total number of surgeries: ");
						IO`print(card hospital.getTasksByType(<Surgery>));
						IO`print("\n Total number of other treatments: ");
						IO`print(card hospital.getTasksByType(<Other>));
						
						assertTrue(card hospital.getTasksByType(<Appointment>) = 3);
						assertTrue(card hospital.getTasksByType(<Urgencies>) = 1);
						assertTrue(card hospital.getTasksByType(<Surgery>) = 1);
						assertTrue(card hospital.getTasksByType(<Other>) = 1);
						
						IO`print("\n Removing an appointment \n");
						hospital.removeTask(appointment);
						assertTrue(card hospital.getTasksByType(<Appointment>) = 2);
						
						IO`print("\n Total number of appointments: ");
						IO`print(card hospital.getTasksByType(<Appointment>));
						
						IO`print("\n Adding an appointment \n");
						hospital.addTask(appointment);
						assertTrue(card hospital.getTasksByType(<Appointment>) = 3);	
						
						IO`print("\n Total number of appointments: ");
						IO`print(card hospital.getTasksByType(<Appointment>));		
		);
		
		public testAddRemoveMedHospital : () ==> ()
		testAddRemoveMedHospital() == (
						dcl newTraining : Training;
						newTraining := new Training(<Training>, schedule4, doctor);
						IO`print("\n Total number of doctors: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Doctor>));
						IO`print("\n Total number of surgeons: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Surgeon>));
						IO`print("\n Total number of nurses: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Nurse>));
						IO`print("\n Total number of technicians: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Technician>));
						
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Surgeon>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Nurse>) = 0);
						assertTrue(card hospital.getMedicalAssociatedByType(<Technician>) = 0);
						
						IO`print("\n Adding a doctor \n");
						hospital.addMedAssociated(doctor);
						
						IO`print("\n Total number of doctors: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Doctor>));
						
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 1);
						hospital.addTraining(newTraining);
						
						IO`print("\n Removing a doctor \n");
						hospital.removeMedAssociated(doctor);
						assertTrue(card hospital.getMedicalAssociatedByType(<Doctor>) = 0);	
						
						IO`print("\n Total number of doctors: ");
						IO`print(card hospital.getMedicalAssociatedByType(<Doctor>));
						
						hospital.addMedAssociated(doctor);
						hospital.addMedAssociated(surgeon);
						hospital.addMedAssociated(nurse);
						hospital.addMedAssociated(technician);		
		);
		
		public testAddRemoveTrainingHospital : () ==> ()
			testAddRemoveTrainingHospital() == (
				IO`print("\n\n Total number of trainings: ");
				IO`print(card hospital.getTrainingsByType(<Training>) + card hospital.getTrainingsByType(<AddSkills>));

				assertTrue(card hospital.getTrainingsByType(<Training>) = 0);
				assertTrue(card hospital.getTrainingsByType(<AddSkills>) = 0);
				
				IO`print("\n Adding a training \n");
				hospital.addTraining(training);
				assertTrue(card hospital.getTrainingsByType(<Training>) = 1);
				
				IO`print("\n Total number of trainings: ");
				IO`print(card hospital.getTrainingsByType(<Training>) + card hospital.getTrainingsByType(<AddSkills>));
				
				IO`print("\n Removing a training \n");
				hospital.removeTraining(training);
				assertTrue(card hospital.getTrainingsByType(<Training>) = 0);
				
				IO`print("\n\n Total number of trainings: ");
				IO`print(card hospital.getTrainingsByType(<Training>) + card hospital.getTrainingsByType(<AddSkills>));
		);
		
		public testOverlap : () ==> ()
			testOverlap() == (
				IO`print("\n\n Checking overlap \n");
				assertTrue(hospital.overlap(schedule, schedule2));
				assertTrue(hospital.overlap(schedule, schedule3) = false);
			);
			
		public testOverlapTask : () ==> ()
			testOverlapTask() == (
				dcl newTask : Appointment, task : Appointment, newTraining1 : Training;
				newTask := new Appointment(doctor, schedule4, patient, hospital);
				newTraining1 := new Training(<Training>, schedule5, doctor2);
			
				task := new Appointment(doctor2, schedule5, patient2, hospital);
				hospital.removeTask(task);
				hospital.addTraining(newTraining1);
				
				IO`print("\n\n Checking overlap task \n");				
				assertTrue(hospital.overlapTask(newTask));
				hospital.removeTask(newTask);
				assertTrue(hospital.overlapTask(task));
				
				hospital.removeTraining(newTraining1);
				assertTrue(card hospital.getTrainingsByType(<Training>) = 0);
			);
			
		public testOverlapTraining : () ==> ()
			testOverlapTraining() == (
				dcl newTraining1 : Training, newTraining2 : Training, newTraining3 : Training, surgeryNew : Surgery;
				newTraining1 := new Training(<Training>, schedule5, doctor2);
				newTraining2 := new Training(<Training>, schedule5, nurse);
				newTraining3 := new Training(<Training>, schedule5, secSurgeon);
				surgeryNew := new Surgery(surgeon, schedule5, patient, hospital);
				surgeryNew.addSecondaryDoctor(secSurgeon);
				hospital.addTraining(newTraining1);
				hospital.addTraining(newTraining2);
				
				IO`print("\n\n Checking overlap training \n");
				assertTrue(hospital.overlapTraining(newTraining1));
				assertTrue(hospital.overlapTraining(newTraining2));
				assertTrue(hospital.overlapTraining(newTraining3));
			);
		
		public testGetHospitalsMoreAppointments : () ==> ()
			testGetHospitalsMoreAppointments() == (	
				IO`print("\n Checking Safety Net Hospitals with more appointments, etc \n");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Appointment>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Urgencies>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Surgery>).getName() = "Hospital das Camélias");
				assertTrue(safetyNet.getHospitalsMoreAppointments(<Other>).getName() = "Hospital das Camélias");
			);
			
		public testGetMedMoreHospitals : () ==> ()
			testGetMedMoreHospitals() == (
				for all t in set safetyNet.getHospitals() do
					if(t.getName() <> "Hospital das Camélias")
						then t.addMedAssociated(doctor);
				
				IO`print("\n Checking Safety Net Doctors that works in more than 1 hospital \n");
				IO`print("\n Number of Doctors: ");	
				IO`print(card safetyNet.getMedMoreHospitals(<Doctor>));	
				assertTrue(card safetyNet.getMedMoreHospitals(<Doctor>) = 1);
				assertTrue(safetyNet.getMedMoreHospitals(<Doctor>) = {doctor}); 	
			);
		
		public testGetMedAssociatedByPatient : () ==> ()
			testGetMedAssociatedByPatient() == (
				dcl mapTest : map Hospital to set of (HealthProfessional);
				IO`print("\n\n Getting Doctors associated by patient by hospital \n");
				mapTest := safetyNet.getMedAssociatedByPatient(patient, <Doctor>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {doctor});
			);
			
		public testGetMedByHospital : () ==> ()
			testGetMedByHospital() == (
				dcl mapTest : map Hospital to set of (HealthProfessional);
				IO`print("\n\n Getting Doctors associated by hospital \n");
				mapTest := safetyNet.getMedByHospital(<Doctor>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {doctor});
				
				mapTest := safetyNet.getMedByHospital(<Surgeon>);
				
				assertTrue(card mapTest(hospital) = 1);
				assertTrue(mapTest(hospital) = {surgeon});
			);
			
		public static main: () ==> ()
 		main() == (
 			dcl safetyNetTest: SafetyNetHospitalTest := new SafetyNetHospitalTest();
 			IO`print("\n *****Running SafetyNetHospitalTest***** \n");
 			safetyNetTest.testAddRemoveHospitals();
 			safetyNetTest.testAddRemoveTaskHospital();
 			safetyNetTest.testAddRemoveTrainingHospital();
 			safetyNetTest.testAddRemoveMedHospital();
 			safetyNetTest.testOverlap();
 			safetyNetTest.testOverlapTask();
 			safetyNetTest.testOverlapTraining();
 			safetyNetTest.testGetHospitalsMoreAppointments();
 			safetyNetTest.testGetMedMoreHospitals();
 			safetyNetTest.testGetMedAssociatedByPatient();
 			safetyNetTest.testGetMedByHospital();
 		);
						
end SafetyNetHospitalTest