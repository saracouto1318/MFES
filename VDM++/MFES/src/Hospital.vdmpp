class Hospital
instance variables
  private medicalAssociated: set of (HealthProfessional);
  private agenda : set of (Agenda);
  private name: Types`String;
  private address: Types`String;
  private tasks: set of(Task);
  private trainings: set of(Training);
  private safetyNet: SafetyNetHospital;
 
 inv card medicalAssociated >= 0;
 inv card agenda <= card medicalAssociated;
 inv card tasks >= 0;
 inv card trainings >= 0;
operations
	-- Hospital constructor
	public Hospital: Types`String * Types`String * SafetyNetHospital ==> Hospital
		Hospital(n, a, s) == (name := n; address := a; safetyNet := s; medicalAssociated := {}; tasks := {}; trainings := {}; agenda := {};
		safetyNet.addHospital(self); return self)
	post name = n and address = a and safetyNet = s and medicalAssociated = {} and tasks = {} and trainings = {} and agenda = {};
	
	-- Returns the hospital's name
	pure public getName: () ==> Types`String
		getName() == (return name);
		
	-- Returns the hospital's address
	pure public getAddress: () ==> Types`String
		getAddress() == (return address);
	
	-- Returns the tasks created on this hospital
	pure public getTasks: () ==> set of (Task)
		getTasks() == (return tasks);
	
	-- Returns the trainings created on this hospital
	pure public getTrainings : () ==> set of (Training)
		getTrainings() == (return trainings);
	
	-- Returns all the agendas of the health professionals of this hospital
	pure public getAgendas : () ==> set of(Agenda)
		getAgendas() == (return agenda);
	
	-- Returns the schedules of a health professional's agenda
	pure public getAgenda : HealthProfessional ==> Agenda
		getAgenda(h) == (
			dcl a1 : Agenda;
			for all a2 in set agenda do
				if(a2.getHealthProfessional() = h)
					then a1 := a2;
			return a1);
	
	-- Removes an agenda
	public removeAgenda : Agenda ==> ()
		removeAgenda(a) == (agenda := agenda \ {a})
	pre a in set agenda
	post a not in set agenda;
	
	-- Adds a health professional to the hospital's health professionals
	public addMedAssociated: HealthProfessional ==> ()
		addMedAssociated(d) == (
			dcl agendaNew : Agenda;
			agendaNew := new Agenda(d);
			medicalAssociated := {d} union medicalAssociated;
			agenda := agenda union {agendaNew})
	pre d not in set medicalAssociated and forall med in set medicalAssociated & d.getCC() <> med.getCC()
	post d in set medicalAssociated;
	
	-- Removes a health professional from the hospital's health professionals
	public removeMedAssociated: HealthProfessional ==> ()
		removeMedAssociated(d) == (
			for all t in set tasks do
				if(d = t.getMedAssoc())
					then removeTask(t);
			for all t in set trainings do
				if(d = t.getMedAssoc())
					then removeTraining(t);
			for all a in set agenda do
				if(a.getHealthProfessional().getCC() = d.getCC())
					then removeAgenda(a);
			medicalAssociated := medicalAssociated \ {d})
	pre d in set medicalAssociated
	post d not in set medicalAssociated;
	
	-- Adds a task to the hospital
	public addTask: Task ==> ()
		addTask(d) == (
			if(d.getPatient() not in set d.getMedAssoc().getPatients())
				then d.getMedAssoc().addPatient(d.getPatient());
			tasks := {d} union tasks;
			for all a in set agenda do
				if(a.getHealthProfessional().getCC() = d.getMedAssoc().getCC())
						then a.removeSchedule(d.getSchedule());)
	pre d not in set tasks and d.getSchedule() in set getAgenda(d.getMedAssoc()).getAgenda()
	post d in set tasks and d.getPatient() in set d.getMedAssoc().getPatients() and d.getSchedule() not in set getAgenda(d.getMedAssoc()).getAgenda();
		
	-- Removes a task from the hospital
	public removeTask: Task ==> ()
		removeTask(d) == (
			for all a in set agenda do
				if(a.getHealthProfessional() = d.getMedAssoc())
						then a.addSchedule(d.getSchedule());
			tasks := tasks \ {d})
	pre d in set tasks and d.getSchedule() not in set getAgenda(d.getMedAssoc()).getAgenda()
	post d not in set tasks and d.getSchedule() in set getAgenda(d.getMedAssoc()).getAgenda();
	
	-- Adds a training to the hospital
	public addTraining: Training ==> ()
		addTraining(d) == (
			for all a in set agenda do
				if(a.getHealthProfessional() = d.getMedAssoc())
						then a.removeSchedule(d.getSchedule());
			trainings := {d} union trainings)
	pre d not in set trainings and d.getSchedule() in set getAgenda(d.getMedAssoc()).getAgenda()
	post d in set trainings and d.getSchedule() not in set getAgenda(d.getMedAssoc()).getAgenda();
	
	-- Removes a training from the hospital
	public removeTraining: Training ==> ()
		removeTraining(d) == (
			for all a in set agenda do
				if(a.getHealthProfessional() = d.getMedAssoc())
						then a.addSchedule(d.getSchedule());
			trainings := trainings \ {d})
	pre d in set trainings and d.getSchedule() not in set getAgenda(d.getMedAssoc()).getAgenda()
	post d not in set trainings and d.getSchedule() in set getAgenda(d.getMedAssoc()).getAgenda();
	
	-- Returns the tasks of a hospital by its type
	pure public getTasksByType: Types`TaskType ==> set of (Task)
		getTasksByType(s) == (
			dcl tasksTotal: set of (Task);
			tasksTotal := {};
			for all t in set tasks do
				if(t.getType() = s)
					then tasksTotal := tasksTotal union {t};		
			return tasksTotal);
	
	-- Returns the trainings of a hospital by its type
	pure public getTrainingsByType: Types`Purpose ==> set of (Training)
		getTrainingsByType(s) == (
			dcl train: set of (Training);
			train := {};
			for all t in set trainings do
				if(t.getPurpose() = s)
					then train := train union {t};	
			return train);

	-- Returns the health professionals of a hospital
	pure public getMedicalAssociated: () ==> set of (HealthProfessional)
		getMedicalAssociated() == (
			return medicalAssociated);

	-- Returns the health professionals of a hospital by its type
	pure public getMedicalAssociatedByType: Types`Type ==> set of (HealthProfessional)
		getMedicalAssociatedByType(type) == (
			dcl med: set of(HealthProfessional);
			med := {};
			for all d in set medicalAssociated do
				if(d.getType() = type)
					then med := med union {d};
			return med);
	
	-- Returns the healthProfessionals of a hospital by its specialty
	pure public getMedicalAssociatedBySpecialty: Types`String ==> set of (HealthProfessional)
		getMedicalAssociatedBySpecialty(spec) == (
			dcl med: set of(HealthProfessional);
			med := {};
			for all d in set medicalAssociated do
				for all s in set d.getSpecialties() do
					if(s.getName() = spec)
						then med := med union {d};
			return med);
end Hospital
