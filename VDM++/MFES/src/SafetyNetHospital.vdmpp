class SafetyNetHospital
instance variables
	private hospitals: set of (Hospital);
	
	inv card hospitals >= 0;
operations

	public SafetyNetHospital : () ==> SafetyNetHospital
		SafetyNetHospital() == (hospitals := {}; return self)
	post hospitals = {};
		
	public addHospital : Hospital ==> ()
		addHospital(h) == (hospitals := hospitals union {h})
	pre h not in set hospitals
	post h in set hospitals;
	
	public removeHospital : Hospital ==> ()
		removeHospital(h) == (hospitals := hospitals \ {h})
	pre h in set hospitals
	post h not in set hospitals;
	
	pure public getHospitals : () ==> set of (Hospital)
		getHospitals() == (return hospitals);
	
	-- Mudar --	
	pure public getHospitalsMoreAppointments : Types`TaskType ==> Hospital
		getHospitalsMoreAppointments(t) == (
																				dcl max: int, hosp: Hospital;
																				max := -1;
																				for all h in set hospitals do
																					if((card h.getTasksByType(t)) > max)
																						then (max := (card h.getTasksByType(t)); hosp := h);
																				return hosp);
	
	pure public getMedMoreHospitals : Types`Type ==> set of(HealthProfessional)
		getMedMoreHospitals(t) == (
																		dcl doctors: set of(HealthProfessional);
																		doctors := {};
																		for all h in set hospitals do (
																			dcl med: set of (HealthProfessional), list: set of(Hospital);
																			med := h.getMedicalAssociatedByType(t);
																			
																			list := hospitals \ {h};
																			for all m in set med do(
																				for all l in set list do
																					if(m.getType() = t and m in set l.getMedicalAssociatedByType(t) and m not in set doctors)
																						then doctors := doctors union {m};
																			);
																		);
																		
																		return doctors;
																	);
																	 													
	pure public getMedAssociatedByPatient: Patient * Types`Type ==> map Hospital to set of(HealthProfessional)
		getMedAssociatedByPatient(p, t) == (
																					dcl maps: map Hospital to set of(HealthProfessional), med : set of (HealthProfessional);
																					maps := { |-> };
																					med := {};
																					for all h in set hospitals do (
																						for all m in set h.getMedicalAssociatedByType(t) do
																							if(p in set m.getPatients())
																								then med := med union {m};
																							
																						maps := maps munion {h |-> med};
																						med := {};);
																						return maps);
	
	pure public getMedByHospital: Types`Type ==> map Hospital to set of(HealthProfessional)
		getMedByHospital(t) == (
																					dcl maps: map Hospital to set of(HealthProfessional);
																					maps := { |-> };
																					for all h in set hospitals do
																						maps := maps munion {h |-> h.getMedicalAssociatedByType(t)};
																					return maps);
end SafetyNetHospital