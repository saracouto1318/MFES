class Surgery is subclass of Task

types

instance variables
  public mainDoctor: [Surgeon];
  public secondaryDoctors:set of (Surgeon);
  public other:set of (OtherMedicalAssociated);
  
  inv mainDoctor <> nil;
  inv card secondaryDoctors >= 0;
  inv card nurses >= 0;
operations

	public Surgery: Surgeon ==> Surgery
		Surgery(s) == (mainDoctor := s; nurses := {}; secondaryDoctors := {}; return self)
	post mainDoctor = s and nurses = {} and secondaryDoctors = {};
	
	pure public addSecondaryDoctor : Surgeon ==> set of (Surgeon)
		addSecondaryDoctor(s) == (return secondaryDoctors union {s})
	pre s not in set secondaryDoctors
	post s in set secondaryDoctors;
		
	pure public removeSecondaryDoctor : Surgeon ==> set of (Surgeon)
		removeSecondaryDoctor(s) == (return secondaryDoctors \ {s})
	pre s in set secondaryDoctors
	post s not in set secondaryDoctors;
		
	pure public addOther : OtherMedicalAssociated ==> set of (OtherMedicalAssociated)
		addOther(s) == (return nurses union {s})
	pre s not in set nurses
	post s in set nurses;
		
	pure public removeOther : OtherMedicalAssociated ==> set of (OtherMedicalAssociated)
		removeOther(s) == (return nurses \ {s})
	pre s in set nurses
	post s not in set nurses;
		
	public setMainDoctor : Surgeon ==> ()
		setMainDoctor(s) == (mainDoctor := s);
		
	public getMainDoctor : () ==> Surgeon
		getMainDoctor() == (return mainDoctor);
		
	public getSecondaryDoctors : () ==> set of (Surgeon)
		getSecondaryDoctors() == (return secondaryDoctors);
		
	public getNurses : () ==> set of (OtherMedicalAssociated)
		getNurses() == (return nurses);
		
	pure public getType : () ==> seq of (char) 
		getType() == (return "Surgery");

end Surgery
