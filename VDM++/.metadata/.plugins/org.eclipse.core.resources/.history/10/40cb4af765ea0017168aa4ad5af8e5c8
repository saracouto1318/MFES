class Schedule

instance variables
  private startHour: Types`Date;
  private endHour: Types`Date;
  
  inv compare(startHour, endHour);
operations	
	public Schedule: Types`Date * Types`Date ==> Schedule
		Schedule(d, d2) == (startHour := d; endHour := d2; return self)
	pre compare(d, d2)
	post startHour = d and endHour = d2;
	
	public setSchedule : Types`Date * Types`Date ==> ()
		setSchedule(d1, d2) == (startHour := d1; endHour := d2;)
	pre compare(d1, d2)
	post startHour = d1 and endHour = d2;
		
	pure public getScheduleStart : () ==> Types`Date
		getScheduleStart() == (return startHour);
		
	pure public getScheduleEnd : () ==> Types`Date
		getScheduleEnd() == (return endHour);
	
	pure public overlap : Schedule * Schedule ==> bool
		overlap(d1, d2) == (
										if((d1.lessThan(d1.startHour, d2.startHour) and not d1.lessThan(d1.endHour, d2.startHour)) or
										(not d1.lessThan(d1.startHour, d2.startHour) and d1.lessThan(d1.startHour, d2.endHour))
											then return true;
										return false;);
											
	pure public lessThan : Types`Date * Types`Date ==> bool
		lessThan(d1, d2) == (
										if(d1.year < d2.year)
											then return true
										else if(d1.year > d2.year)
											then return false;
										if(d1.month < d2.month)
											then return true
										else if(d1.month > d2.month)
											then return false;
										if(d1.day < d2.day)
											then return true
										else if(d1.day > d2.day)
											then return false;
										if(d1.time.hour < d2.time.hour)
											then return true
										else if(d1.time.hour > d2.time.hour)
											then return false;
										return (d1.time.min <= d2.time.min););
end Schedule
