\begin{vdmpp}[breaklines=true]
class Hospital
types
 public String = seq of(char);
instance variables
  public medicalAssociated: set of (MedicalAssociated);
  public name: String;
  public address: String;
  public tasks: set of(Task);
 
 inv card medicalAssociated > 0;
 inv card tasks > 0;
operations
(*@
\label{Hospital:13}
@*)
(*@
\label{Date:13}
@*)

 public Hospital: String * String ==> Hospital
(*@
\label{getName:15}
@*)
  Hospital(n, a) == (name := n; address := a; medicalAssociated := {}; tasks := {}; return self)
 pre n <> [] and a <> []
 post name = n and address = a and medicalAssociated = {} and tasks = {};
(*@
\label{getAddress:18}
@*)
 
 pure public getName: () ==> String
  getName() == (return name);
(*@
\label{getMedicalAssociated:21}
@*)
 
 pure public getAddress: () ==> String
  getAddress() == (return address);
(*@
\label{getMedAssociated:24}
@*)
  
 pure public getMedicalAssociated: () ==> set of (MedicalAssociated)
  getMedicalAssociated() == (return medicalAssociated);
  
(*@
\label{getTaks:28}
@*)
(*@
\label{getTasks:28}
@*)
 pure public getTasks: () ==> set of (Task)
  getTasks() == (return tasks);
 
(*@
\label{addMedAssociated:31}
@*)
(*@
\label{addDoctor:31}
@*)
 pure public getMedAssociated: String ==> MedicalAssociated
  getMedAssociated(n) == (
                   dcl medical: MedicalAssociated;
(*@
\label{addSurgeon:34}
@*)
(*@
\label{removeMedAssociated:34}
@*)
                   for all m in set medicalAssociated do
                    if(m.getName() = n)
                     then medical := m;
(*@
\label{addNurse:37}
@*)
                     
                   return medical;
                 )
(*@
\label{addTechnician:40}
@*)
 pre n <> [];
 
 pure public addMedAssociated: MedicalAssociated ==> set of (MedicalAssociated)
(*@
\label{removeDoctor:43}
@*)
  addMedAssociated(d) == (return ({d} union medicalAssociated))
 pre d not in set medicalAssociated
 post d in set medicalAssociated;
(*@
\label{removeSurgeon:46}
@*)
  
(*@
\label{numAppointments:47}
@*)
 pure public removeMedAssociated: MedicalAssociated ==> set of (MedicalAssociated)
  removeMedAssociated(d) == (return (medicalAssociated \ {d}))
(*@
\label{removeNurse:49}
@*)
 pre d in set medicalAssociated
 post d not in set medicalAssociated;
 
(*@
\label{removeTechnician:52}
@*)
(*@
\label{addTask:52}
@*)
 pure public addTask: Task ==> set of (Task)
  addTask(d) == (return ({d} union tasks))
 pre d not in set tasks
 post d in set tasks;
  
(*@
\label{removeTask:57}
@*)
 pure public removeTask: Task ==> set of (Task)
  removeTask(d) == (return (tasks \ {d}))
 pre d in set tasks
 post d not in set tasks;
 
 pure public numAppointments: () ==> nat
  numAppointments() == (
              dcl num: nat;
              num := 0;
              for all t in set tasks do
               if(t.getType() = "Appointment")
                then num := num + 1;
              return num);
              
(*@
\label{numDoctors:71}
@*)
 pure public numDoctors: () ==> nat
  numDoctors() == (
              dcl num: nat;
              num := 0;
              for all t in set medicalAssociated do
               if(t.getType() = "Doctor")
                then num := num + 1;
              return num);

(*@
\label{getDoctors:80}
@*)
 pure public getDoctors: () ==> set of (Doctor)
  getDoctors() == (
           dcl doctors: set of (Doctor);
           for all d in set medicalAssociated do
            if(d.getType() = "Doctor")
             then doctors := doctors union {d};
             
           return doctors);
end Hospital
\end{vdmpp}
